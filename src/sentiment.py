"""
An√°lise de sentimentos usando LLM generativo com emo√ß√µes avan√ßadas
"""

from typing import Dict, List, Any, Optional
from src.llm_providers import llm_manager
import warnings
import json
import re

# Suprime os warnings
warnings.filterwarnings("ignore")

class SentimentAnalyzer:
    """Analisador de sentimentos com LLM e emo√ß√µes avan√ßadas."""
    
    def __init__(self):
        """Inicializa o analisador."""
        self.methods = {}
        self.emotion_mapping = self._setup_emotion_mapping()
        self._setup_llm()
        
        print("Analisador de sentimentos avan√ßado inicializado.")
    
    def _setup_emotion_mapping(self) -> Dict[str, Dict[str, Any]]:
        """Define o mapeamento de emo√ß√µes espec√≠ficas."""
        return {
            # Emo√ß√µes b√°sicas de Ekman + outras importantes
            "felicidade": {
                "emoji": "üòä",
                "category": "positive",
                "intensity_levels": ["alegria_leve", "contentamento", "euforia", "√™xtase"],
                "synonyms": ["alegria", "contentamento", "satisfa√ß√£o", "j√∫bilo"]
            },
            "tristeza": {
                "emoji": "üò¢",
                "category": "negative", 
                "intensity_levels": ["melancolia", "tristeza", "depress√£o", "desespero"],
                "synonyms": ["melancolia", "pesar", "afli√ß√£o", "des√¢nimo"]
            },
            "raiva": {
                "emoji": "üò†",
                "category": "negative",
                "intensity_levels": ["irrita√ß√£o", "aborrecimento", "raiva", "f√∫ria"],
                "synonyms": ["irrita√ß√£o", "ira", "f√∫ria", "aborrecimento", "indigna√ß√£o"]
            },
            "medo": {
                "emoji": "üò®",
                "category": "negative",
                "intensity_levels": ["apreens√£o", "ansiedade", "medo", "terror"],
                "synonyms": ["ansiedade", "apreens√£o", "temor", "p√¢nico", "terror"]
            },
            "nojo": {
                "emoji": "ü§¢",
                "category": "negative",
                "intensity_levels": ["desconforto", "avers√£o", "nojo", "repulsa"],
                "synonyms": ["avers√£o", "repulsa", "repugn√¢ncia", "asco"]
            },
            "surpresa": {
                "emoji": "üò≤", 
                "category": "neutral",
                "intensity_levels": ["curiosidade", "surpresa", "espanto", "choque"],
                "synonyms": ["espanto", "admira√ß√£o", "perplexidade", "choque"]
            },
            # Emo√ß√µes adicionais importantes
            "amor": {
                "emoji": "ü•∞",
                "category": "positive",
                "intensity_levels": ["carinho", "afeto", "amor", "paix√£o"],
                "synonyms": ["carinho", "afeto", "ternura", "paix√£o", "adora√ß√£o"]
            },
            "esperan√ßa": {
                "emoji": "üåü",
                "category": "positive", 
                "intensity_levels": ["otimismo", "esperan√ßa", "confian√ßa", "f√©"],
                "synonyms": ["otimismo", "expectativa", "confian√ßa", "f√©"]
            },
            "decep√ß√£o": {
                "emoji": "üòû",
                "category": "negative",
                "intensity_levels": ["insatisfa√ß√£o", "decep√ß√£o", "desilus√£o", "desapontamento"],
                "synonyms": ["desilus√£o", "desapontamento", "frustra√ß√£o"]
            },
            "neutral": {
                "emoji": "üòê",
                "category": "neutral",
                "intensity_levels": ["calma", "neutralidade", "indiferen√ßa"],
                "synonyms": ["neutralidade", "indiferen√ßa", "serenidade"]
            }
        }
    
    def _setup_llm(self):
        """Configura an√°lise com LLM (mais contextual)."""
        if llm_manager.get_llm() is not None:
            self.methods["llm"] = {
                "available": True,
                "speed": "medium",
                "accuracy": "very_high"
            }
            self.methods["advanced_emotions"] = {
                "available": True,
                "speed": "medium", 
                "accuracy": "very_high",
                "supports_multiple": True
            }
            print("LLM configurado para an√°lise avan√ßada de emo√ß√µes")
        else:
            self.methods["llm"] = {"available": False}
            self.methods["advanced_emotions"] = {"available": False}
    
    def analyze_llm(self, text: str) -> Dict[str, Any]:
        """An√°lise b√°sica usando LLM (mantida para compatibilidade)."""
        if not self.methods["llm"]["available"]:
            return {"error": "LLM n√£o dispon√≠vel"}
        
        try:
            prompt = f"""
            Analise o sentimento do texto abaixo e responda APENAS com um JSON no formato:
            {{"sentiment": "positive/negative/neutral", "confidence": 0.0-1.0, "explanation": "breve explica√ß√£o"}}
            
            IMPORTANTE: 
            - Responda SEMPRE na l√≠ngua que o usu√°rio est√° falando
            - Use apenas "positive", "negative" ou "neutral" para sentiment
            
            Texto para an√°lise:
            "{text}"
            
            JSON:
            """
            
            response = llm_manager.invoke_llm(prompt)
            
            # Tenta extrair JSON da resposta
            json_match = re.search(r'\{.*\}', response, re.DOTALL)
            if json_match:
                try:
                    result = json.loads(json_match.group())
                    return {
                        "sentiment": result.get("sentiment", "neutral"),
                        "confidence": float(result.get("confidence", 0.5)),
                        "explanation": result.get("explanation", "An√°lise LLM"),
                        "method": "llm",
                        "raw_response": response
                    }
                except json.JSONDecodeError:
                    pass
            
            # Fallback: an√°lise simples da resposta
            response_lower = response.lower()
            if "positive" in response_lower or "positivo" in response_lower:
                sentiment = "positive"
                confidence = 0.7
            elif "negative" in response_lower or "negativo" in response_lower:
                sentiment = "negative"
                confidence = 0.7
            else:
                sentiment = "neutral"
                confidence = 0.5
            
            return {
                "sentiment": sentiment,
                "confidence": confidence,
                "explanation": response[:100] + "..." if len(response) > 100 else response,
                "method": "llm",
                "raw_response": response
            }
            
        except Exception as e:
            return {"error": f"Erro LLM: {e}"}
    
    def analyze_advanced_emotions(self, text: str) -> Dict[str, Any]:
        """An√°lise avan√ßada de emo√ß√µes m√∫ltiplas usando LLM."""
        if not self.methods["advanced_emotions"]["available"]:
            return {"error": "An√°lise avan√ßada n√£o dispon√≠vel"}
        
        try:
            # Lista de emo√ß√µes dispon√≠veis para o prompt
            emotions_list = ", ".join(self.emotion_mapping.keys())
            
            prompt = f"""
            Analise as emo√ß√µes presentes no texto abaixo. Pode haver m√∫ltiplas emo√ß√µes simultaneamente.
            
            Emo√ß√µes dispon√≠veis: {emotions_list}
            
            Responda APENAS com um JSON no formato:
            {{
                "emotions": [
                    {{"emotion": "nome_da_emo√ß√£o", "intensity": 0.0-1.0, "confidence": 0.0-1.0}},
                    {{"emotion": "outra_emo√ß√£o", "intensity": 0.0-1.0, "confidence": 0.0-1.0}}
                ],
                "primary_emotion": "emo√ß√£o_dominante",
                "emotional_complexity": "simple/moderate/complex",
                "overall_sentiment": "positive/negative/neutral/mixed",
                "explanation": "explica√ß√£o detalhada das emo√ß√µes detectadas"
            }}
            
            INSTRU√á√ïES:
            - Detecte TODAS as emo√ß√µes presentes, mesmo se fracas
            - Use apenas emo√ß√µes da lista fornecida
            - intensity: qu√£o forte √© a emo√ß√£o (0.0 = muito fraca, 1.0 = muito intensa)
            - confidence: qu√£o certo voc√™ est√° da presen√ßa dessa emo√ß√£o
            - emotional_complexity: "simple" (1 emo√ß√£o), "moderate" (2-3), "complex" (4+)
            - overall_sentiment: "mixed" quando h√° emo√ß√µes conflitantes
            
            Texto para an√°lise:
            "{text}"
            
            JSON:
            """
            
            response = llm_manager.invoke_llm(prompt)
            
            # Tenta extrair JSON da resposta
            json_match = re.search(r'\{.*\}', response, re.DOTALL)
            if json_match:
                try:
                    result = json.loads(json_match.group())
                    
                    # Processa e valida as emo√ß√µes detectadas
                    emotions_detected = []
                    for emotion_data in result.get("emotions", []):
                        emotion_name = emotion_data.get("emotion", "").lower()
                        if emotion_name in self.emotion_mapping:
                            emotions_detected.append({
                                "emotion": emotion_name,
                                "intensity": float(emotion_data.get("intensity", 0.5)),
                                "confidence": float(emotion_data.get("confidence", 0.5)),
                                "emoji": self.emotion_mapping[emotion_name]["emoji"],
                                "category": self.emotion_mapping[emotion_name]["category"]
                            })
                    
                    # Calcula emo√ß√£o prim√°ria
                    primary_emotion = result.get("primary_emotion", "neutral").lower()
                    if primary_emotion not in self.emotion_mapping:
                        # Se a emo√ß√£o prim√°ria n√£o √© v√°lida, usa a com maior intensidade
                        if emotions_detected:
                            primary_emotion = max(emotions_detected, key=lambda x: x["intensity"])["emotion"]
                        else:
                            primary_emotion = "neutral"
                    
                    return {
                        "emotions": emotions_detected,
                        "primary_emotion": primary_emotion,
                        "primary_emoji": self.emotion_mapping[primary_emotion]["emoji"],
                        "emotional_complexity": result.get("emotional_complexity", "simple"),
                        "overall_sentiment": result.get("overall_sentiment", "neutral"),
                        "explanation": result.get("explanation", "An√°lise avan√ßada de emo√ß√µes"),
                        "method": "advanced_emotions",
                        "emotions_count": len(emotions_detected),
                        "raw_response": response
                    }
                    
                except (json.JSONDecodeError, KeyError, ValueError) as e:
                    return {"error": f"Erro ao processar an√°lise avan√ßada: {e}"}
            
            # Fallback para an√°lise simples se JSON falhar
            return self._fallback_emotion_analysis(text, response)
            
        except Exception as e:
            return {"error": f"Erro na an√°lise avan√ßada: {e}"}
    
    def _fallback_emotion_analysis(self, text: str, response: str) -> Dict[str, Any]:
        """An√°lise de fallback quando o JSON n√£o pode ser extra√≠do."""
        response_lower = response.lower()
        text_lower = text.lower()
        
        # Detecta emo√ß√µes baseado em palavras-chave
        detected_emotions = []
        
        for emotion, info in self.emotion_mapping.items():
            score = 0
            # Verifica a emo√ß√£o na resposta do LLM
            if emotion in response_lower:
                score += 0.7
            
            # Verifica sin√¥nimos
            for synonym in info["synonyms"]:
                if synonym in response_lower or synonym in text_lower:
                    score += 0.3
            
            if score > 0:
                detected_emotions.append({
                    "emotion": emotion,
                    "intensity": min(score, 1.0),
                    "confidence": 0.6,
                    "emoji": info["emoji"],
                    "category": info["category"]
                })
        
        # Se nenhuma emo√ß√£o detectada, assume neutral
        if not detected_emotions:
            detected_emotions = [{
                "emotion": "neutral",
                "intensity": 0.5,
                "confidence": 0.5,
                "emoji": "üòê",
                "category": "neutral"
            }]
        
        primary_emotion = max(detected_emotions, key=lambda x: x["intensity"])["emotion"]
        
        return {
            "emotions": detected_emotions,
            "primary_emotion": primary_emotion,
            "primary_emoji": self.emotion_mapping[primary_emotion]["emoji"],
            "emotional_complexity": "simple" if len(detected_emotions) == 1 else "moderate",
            "overall_sentiment": "neutral",
            "explanation": "An√°lise de fallback baseada em palavras-chave",
            "method": "advanced_emotions_fallback",
            "emotions_count": len(detected_emotions),
            "raw_response": response
        }
    
    def analyze_comprehensive(self, text: str) -> Dict[str, Any]:
        """
        An√°lise completa usando LLM b√°sico e an√°lise avan√ßada de emo√ß√µes.
        
        Args:
            text: Texto para an√°lise
            
        Returns:
            Resultado da an√°lise
        """
        results = {
            "individual_results": {},
            "consensus": {},
            "advanced_analysis": {},
            "metadata": {
                "text_length": len(text),
                "methods_used": [],
                "timestamp": "now"
            }
        }
        
        # Executa a an√°lise LLM b√°sica
        if self.methods["llm"]["available"]:
            results["individual_results"]["llm"] = self.analyze_llm(text)
            if "error" not in results["individual_results"]["llm"]:
                results["metadata"]["methods_used"].append("llm")
        
        # Executa a an√°lise avan√ßada de emo√ß√µes
        if self.methods["advanced_emotions"]["available"]:
            results["advanced_analysis"] = self.analyze_advanced_emotions(text)
            if "error" not in results["advanced_analysis"]:
                results["metadata"]["methods_used"].append("advanced_emotions")
        
        # Calcula o consenso b√°sico (compatibilidade)
        if "llm" in results["individual_results"] and "error" not in results["individual_results"]["llm"]:
            llm_result = results["individual_results"]["llm"]
            results["consensus"] = {
                "sentiment": llm_result["sentiment"],
                "confidence": llm_result["confidence"],
                "agreement": "unanimous",
                "agreement_ratio": 1.0,
                "methods_count": 1,
                "individual_sentiments": [llm_result["sentiment"]],
                "individual_confidences": [llm_result["confidence"]]
            }
        else:
            results["consensus"] = {
                "sentiment": "neutral",
                "confidence": 0.0,
                "agreement": "none",
                "methods_count": 0
            }
        
        return results
    
    def analyze_batch(self, texts: List[str]) -> List[Dict[str, Any]]:
        """
        An√°lise em lote de m√∫ltiplos textos.
        
        Args:
            texts: Lista de textos para an√°lise
            
        Returns:
            Lista de resultados de an√°lise
        """
        return [self.analyze_comprehensive(text) for text in texts]
    
    def get_available_methods(self) -> Dict[str, Dict[str, Any]]:
        """
        Retorna informa√ß√µes sobre os m√©todos dispon√≠veis.
        
        Returns:
            Dicion√°rio com status e capacidades de cada m√©todo
        """
        return self.methods.copy()
    
    def get_emotion_mapping(self) -> Dict[str, Dict[str, Any]]:
        """
        Retorna o mapeamento de emo√ß√µes dispon√≠veis.
        
        Returns:
            Dicion√°rio com todas as emo√ß√µes e suas propriedades
        """
        return self.emotion_mapping.copy()
    
    def get_emotions_by_category(self, category: str) -> List[str]:
        """
        Retorna emo√ß√µes de uma categoria espec√≠fica.
        
        Args:
            category: Categoria (positive, negative, neutral)
            
        Returns:
            Lista de emo√ß√µes da categoria
        """
        return [
            emotion for emotion, info in self.emotion_mapping.items()
            if info["category"] == category
        ]

# Inst√¢ncia global do analisador
sentiment_analyzer = SentimentAnalyzer() 