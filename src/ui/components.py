"""
Componentes UI Especializados para Single Responsibility Principle.
Cada classe tem UMA responsabilidade espec√≠fica na interface.
"""

import streamlit as st
from typing import Dict, List, Any, Optional
from datetime import datetime
import json


# ========================================
# COMPONENTES DE EXIBI√á√ÉO - Display Components
# ========================================

class ChatMessageRenderer:
    """Responsabilidade √∫nica: renderizar mensagens de chat."""
    
    def __init__(self):
        self.provider_icons = {
            "groq": "üöÄ",
            "unknown": "‚ùì"
        }
    
    def render_user_message(self, message: str, timestamp: str) -> None:
        """Renderiza mensagem do usu√°rio usando st.chat_message."""
        with st.chat_message("user"):
            st.markdown(f"**üë§ Voc√™ ({timestamp}):**")
            st.markdown(message)
    
    def render_bot_message(self, message: str, provider: str) -> None:
        """Renderiza mensagem do bot usando st.chat_message."""
        icon = self.provider_icons.get(provider, self.provider_icons["unknown"])
        provider_name = provider.title()
        
        with st.chat_message("assistant"):
            st.markdown(f"**{icon} {provider_name} Assistant:**")
            st.markdown(message)
    
    def render_conversation_history(self, chat_history: List[Dict]) -> None:
        """Renderiza todo o hist√≥rico de conversa usando st.chat_message."""
        for msg in chat_history:
            self.render_user_message(msg['user'], msg['timestamp'])
            self.render_bot_message(msg['bot'], msg.get('provider', 'unknown'))


class MetricsDisplayer:
    """Responsabilidade √∫nica: exibir m√©tricas e estat√≠sticas."""
    
    def render_system_metrics(self, personality: str, provider_name: str, message_count: int) -> None:
        """Renderiza m√©tricas do sistema."""
        col1, col2, col3 = st.columns([2, 1, 1])
        
        with col1:
            st.info(f"üé≠ Personalidade atual: **{personality.title()}**")
        
        with col2:
            icon = "üöÄ" if provider_name == "groq" else "‚ùì"
            st.success(f"{icon} **{provider_name.title()}**")
        
        with col3:
            st.metric("Mensagens", message_count)
    
    def render_provider_metrics(self, all_providers: Dict[str, Any], available_count: int, current_name: str) -> None:
        """Renderiza m√©tricas de provedores."""
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Provedores Registrados", len(all_providers))
        with col2:
            st.metric("Provedores Dispon√≠veis", available_count)
        with col3:
            st.metric("Provedor Ativo", current_name.title())
    
    def render_text_statistics(self, stats: Dict[str, Any]) -> None:
        """Renderiza estat√≠sticas de texto."""
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Palavras", stats["words"])
        with col2:
            st.metric("Frases", stats["sentences"])
        with col3:
            st.metric("Caracteres", stats["characters"])
        with col4:
            st.metric("Palavras/Frase", stats["avg_words_per_sentence"])


class StatusIndicator:
    """Responsabilidade √∫nica: indicar status de componentes."""
    
    def show_api_status(self, provider_name: str, is_available: bool, is_active: bool) -> None:
        """Mostra status de uma API."""
        if is_active and is_available:
            icon = "üü¢"
            status_text = "ATIVO"
            st.success(f"{icon} **{provider_name.upper()}** - {status_text}")
        elif is_available:
            icon = "üîµ"
            status_text = "DISPON√çVEL"
            st.info(f"{icon} **{provider_name.upper()}** - {status_text}")
        else:
            icon = "üî¥"
            status_text = "INDISPON√çVEL"
            st.error(f"{icon} **{provider_name.upper()}** - {status_text}")
    
    def show_component_status(self, component_name: str, is_active: bool) -> None:
        """Mostra status de um componente."""
        status = "‚úÖ Ativo" if is_active else "‚ùå Inativo"
        st.markdown(f"- **{component_name}:** {status}")


# ========================================
# COMPONENTES DE ENTRADA - Input Components
# ========================================

class InputCollector:
    """Responsabilidade √∫nica: coletar entrada do usu√°rio."""
    
    def collect_chat_input(self, example_text: str, message_count: int) -> str:
        """Coleta entrada para chat."""
        user_input = st.chat_input(
            placeholder="Fa√ßa uma pergunta ou inicie uma conversa...",
            key=f"chat_input_{message_count}"
        )
        
        return user_input or ""
    
    def collect_text_for_analysis(self, example_text: str, placeholder: str, height: int = 150, context: str = "default") -> str:
        """Coleta texto para an√°lise."""
        return st.text_area(
            "üìù Digite o texto para an√°lise:",
            value=example_text,
            placeholder=placeholder,
            height=height,
            key=f"analysis_text_input_{context}"
        )
    
    def collect_summarizer_settings(self) -> Dict[str, Any]:
        """Coleta configura√ß√µes do resumidor."""
        col1, col2, col3 = st.columns(3)
        
        with col1:
            summary_type = st.selectbox(
                "üéØ Tipo de Resumo:",
                ["informative", "executive", "creative", "technical"],
                help="Escolha o estilo do resumo"
            )
        
        with col2:
            max_sentences = st.slider(
                "üìè Frases (Extrativo):",
                min_value=1, max_value=10, value=3
            )
        
        return {
            "summary_type": summary_type,
            "max_sentences": max_sentences
        }


class ButtonController:
    """Responsabilidade √∫nica: gerenciar bot√µes e a√ß√µes."""
    
    def create_action_buttons(self, message_count: int) -> Dict[str, bool]:
        """Cria bot√µes de a√ß√£o e retorna estado."""
        col1, col2, col3, col4 = st.columns([1, 1, 1, 1.3])
        
        buttons = {}
        
        with col1:
            buttons["send"] = st.button("üì§ Enviar", type="primary", key=f"send_btn_{message_count}")
        
        with col2:
            buttons["clear"] = st.button("üßπ Limpar", key=f"clear_btn_{message_count}")
        
        with col3:
            buttons["example"] = st.button("üé≤ Exemplo", key=f"example_btn_{message_count}")
        
        with col4:
            self._render_back_to_top_button()
        
        return buttons
    
    def _render_back_to_top_button(self) -> None:
        """Renderiza bot√£o de voltar ao topo."""
        st.html("""
        <a href="#page-top" style="
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 0.25rem 0.75rem;
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            color: white;
            text-decoration: none;
            border-radius: 0.5rem;
            text-align: center;
            font-weight: 400;
            font-size: 0.875rem;
            line-height: 1.6;
            height: 2.5rem;
            min-height: 2.5rem;
            box-sizing: border-box;
            cursor: pointer;
            border: 1px solid transparent;
            transition: transform 0.2s, box-shadow 0.2s;
            margin: 0;
            white-space: nowrap;
        " onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 4px 8px rgba(0,0,0,0.2)'" 
           onmouseout="this.style.transform='translateY(0px)'; this.style.boxShadow='none'"
           onmousedown="this.style.transform='translateY(0px)'">
            ‚¨ÜÔ∏è Voltar ao Topo
        </a>
        """)


# ========================================
# COMPONENTES DE CONFIGURA√á√ÉO - Settings Components
# ========================================

class SettingsPanel:
    """Responsabilidade √∫nica: gerenciar pain√©is de configura√ß√£o."""
    
    def render_provider_selector(self, available_providers: List[str], current_provider: str) -> Optional[str]:
        """Renderiza seletor de provedor."""
        if not available_providers:
            st.error("‚ùå Nenhuma API configurada")
            return None
        
        provider_names = {"groq": "üöÄ Groq"}
        options = [provider_names.get(p, p.title()) for p in available_providers]
        
        try:
            current_index = available_providers.index(current_provider)
        except ValueError:
            current_index = 0
        
        selected_display = st.selectbox(
            "Escolha a API:",
            options,
            index=current_index,
            help="Selecione o provedor de LLM. Atualmente apenas Groq est√° dispon√≠vel."
        )
        
        # Converte de volta para nome interno
        for internal_name, display_name in provider_names.items():
            if display_name == selected_display:
                return internal_name
        
        return None
    
    def render_personality_selector(self, current_personality: str) -> str:
        """Renderiza seletor de personalidade."""
        return st.selectbox(
            "Personalidade:",
            ["helpful", "creative", "technical"],
            index=["helpful", "creative", "technical"].index(current_personality),
            help="Escolha como o chatbot deve se comportar"
        )


# ========================================
# COMPONENTES DE VALIDA√á√ÉO - Validation Components
# ========================================

class InputValidator:
    """Responsabilidade √∫nica: validar entrada do usu√°rio."""
    
    def validate_text_input(self, text: str, min_length: int = 1, max_length: int = 3000) -> Dict[str, Any]:
        """Valida entrada de texto."""
        if not text or not text.strip():
            return {
                "valid": False,
                "error": "Texto n√£o pode estar vazio",
                "text": None
            }
        
        text = text.strip()
        
        if len(text) < min_length:
            return {
                "valid": False,
                "error": f"Texto deve ter pelo menos {min_length} caracteres",
                "text": None
            }
        
        if len(text) > max_length:
            return {
                "valid": False,
                "error": f"Texto deve ter no m√°ximo {max_length} caracteres",
                "text": None
            }
        
        return {
            "valid": True,
            "error": None,
            "text": text
        }
    
    def validate_provider_available(self, provider_registry) -> Dict[str, Any]:
        """Valida se algum provedor est√° dispon√≠vel."""
        if not provider_registry.is_any_provider_available():
            return {
                "valid": False,
                "error": "Nenhuma API configurada. Execute: python setup_env.py",
                "providers": []
            }
        
        return {
            "valid": True,
            "error": None,
            "providers": provider_registry.get_available_providers()
        }


# ========================================
# F√ÅBRICA DE COMPONENTES - Component Factory
# ========================================

class ComponentFactory:
    """F√°brica para criar componentes UI especializados."""
    
    @staticmethod
    def create_chat_components() -> Dict[str, Any]:
        """Cria conjunto de componentes para chat."""
        return {
            "message_renderer": ChatMessageRenderer(),
            "input_collector": InputCollector(),
            "button_controller": ButtonController(),
            "metrics_displayer": MetricsDisplayer(),
            "validator": InputValidator(),
            "status_indicator": StatusIndicator()
        }
    
    @staticmethod
    def create_analysis_components() -> Dict[str, Any]:
        """Cria conjunto de componentes para an√°lise."""
        return {
            "input_collector": InputCollector(),
            "metrics_displayer": MetricsDisplayer(),
            "validator": InputValidator(),
            "status_indicator": StatusIndicator()
        }
    
    @staticmethod
    def create_settings_components() -> Dict[str, Any]:
        """Cria conjunto de componentes para configura√ß√µes."""
        return {
            "settings_panel": SettingsPanel(),
            "status_indicator": StatusIndicator(),
            "metrics_displayer": MetricsDisplayer()
        } 