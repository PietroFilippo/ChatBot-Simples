"""
Sistema de IA Generativa Multi-Funcional
Interface principal usando Streamlit
"""

import streamlit as st
import streamlit.components.v1 as components
import sys
import os
from datetime import datetime
import json

# Adiciona o diret√≥rio atual ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Importa os m√≥dulos do projeto
from src.llm_providers import provider_registry
from src.chatbot import IntelligentChatbot
from src.sentiment import sentiment_analyzer
from src.summarizer import summarizer
from utils.helpers import (
    measure_execution_time, format_text_for_display, clean_text,
    calculate_text_stats, get_emoji_for_sentiment, format_confidence_display,
    validate_text_input, create_download_link
)

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="IA Generativa Multi-Funcional",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS customizado para interface moderna
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        text-align: center;
        margin-bottom: 2rem;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }
    
    .feature-card {
        background: var(--background-color);
        border: 1px solid var(--secondary-background-color);
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 4px solid #667eea;
        margin: 1rem 0;
        color: var(--text-color);
    }
    
    .feature-card h4 {
        color: var(--text-color);
        margin-bottom: 0.5rem;
    }
    
    .feature-card p {
        color: var(--text-color);
        margin: 0;
    }
    
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1rem;
        border-radius: 8px;
        text-align: center;
    }
    
    .success-box {
        background: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    .warning-box {
        background: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    /* Compatibilidade com tema escuro */
    @media (prefers-color-scheme: dark) {
        .feature-card {
            background: #262730;
            border-color: #464853;
            color: #fafafa;
        }
        
        .feature-card h4,
        .feature-card p {
            color: #fafafa;
        }
    }
    
    /* For√ßa o tema escuro pro Streamlit */
    .stApp {
        --background-color: #0e1117;
        --secondary-background-color: #262730;
        --text-color: #fafafa;
    }
    
    .feature-card {
        background: #262730 !important;
        border-color: #464853 !important;
        color: #fafafa !important;
    }
    
    .feature-card h4,
    .feature-card p {
        color: #fafafa !important;
    }
</style>
""", unsafe_allow_html=True)

def preserve_chatbot_state(new_personality: str = None):
    """
    Preserva o estado do chatbot quando recria a inst√¢ncia
    
    Args:
        new_personality: Nova personalidade (opcional, mant√©m a atual)
    """
    if hasattr(st.session_state, 'chatbot'):
        # Salva o estado atual
        old_history = st.session_state.chatbot.conversation_history.copy()
        old_memory = st.session_state.chatbot.memory.copy()
        old_personality = new_personality or st.session_state.chatbot.personality
        
        # Recria o chatbot com o mesmo estado
        st.session_state.chatbot = IntelligentChatbot(
            personality=old_personality
        )
        
        # Restaura o hist√≥rico preservado
        st.session_state.chatbot.conversation_history = old_history
        st.session_state.chatbot.memory = old_memory
        
        return len(old_history)
    return 0

def initialize_session_state():
    """Inicializa vari√°veis de sess√£o"""
    if 'chatbot' not in st.session_state:
        st.session_state.chatbot = IntelligentChatbot()
    
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []
    
    if 'analysis_results' not in st.session_state:
        st.session_state.analysis_results = {}

def show_header():
    """Exibe o cabe√ßalho principal"""
    # √Çncora para o topo da p√°gina
    st.markdown('<a id="page-top"></a>', unsafe_allow_html=True)
    
    st.markdown('<h1 class="main-header">Sistema de IA Generativa Multi-Funcional</h1>', 
                unsafe_allow_html=True)
    
    st.markdown("""
    <div style="text-align: center; margin-bottom: 2rem;">
        <p style="font-size: 1.2rem; color: #666;">
            Utiliza√ß√£o de <strong>LangChain</strong>, <strong>LLMs gratuitos</strong> e <strong>fluxos de IA</strong>
        </p>
    </div>
    """, unsafe_allow_html=True)

def show_sidebar():
    """Configura sidebar com informa√ß√µes e configura√ß√µes"""
    st.sidebar.title("‚öôÔ∏è Configura√ß√µes")
    
    # Seletor de Provedor LLM
    st.sidebar.subheader("üîó Seletor de API")
    
    # Obtem provedores dispon√≠veis
    available_providers_dict = provider_registry.get_available_providers()
    available_providers = list(available_providers_dict.keys())  # Convert to list of names
    all_providers = provider_registry.get_all_providers_info()
    
    if available_providers:
        # Cria√ß√£o do mapeamento
        provider_names = {
            "groq": "üöÄ Groq"
        }
        
        # Op√ß√µes do selectbox
        options = [provider_names.get(p, p.title()) for p in available_providers]
        current_provider = provider_registry.get_current_provider()
        current_index = available_providers.index(current_provider.get_name()) if current_provider and current_provider.get_name() in available_providers else 0
        
        # Selectbox para escolher provedor
        selected_display = st.sidebar.selectbox(
            "Escolha a API:",
            options,
            index=current_index,
            help="Selecione o provedor de LLM. Atualmente apenas Groq est√° dispon√≠vel."
        )
        
        # Converte de volta para o nome interno
        selected_provider = None
        for internal_name, display_name in provider_names.items():
            if display_name == selected_display:
                selected_provider = internal_name
                break
        
        # Troca o provedor se necess√°rio
        if selected_provider and selected_provider != current_provider.get_name():
            if provider_registry.switch_provider(selected_provider):
                st.sidebar.success(f"Mudou para: {selected_display}")
                
                # Preserva o hist√≥rico ao trocar o provedor
                msg_count = preserve_chatbot_state()
                if msg_count > 0:
                    st.sidebar.info(f"üìä Hist√≥rico preservado: {msg_count} mensagens")
                
                st.rerun()
    else:
        st.sidebar.error("‚ùå Nenhuma API configurada")
        st.sidebar.warning("Configure pelo menos uma API para usar o sistema")
    
    # Status dos provedores
    with st.sidebar.expander("üìä Status das APIs", expanded=False):
        for name, info in all_providers.items():
            provider = provider_registry.get_provider(name)
            status_emoji = "‚úÖ" if provider.is_available() else "‚ùå"
            speed_info = f"({info['speed']}, {info['cost']})"
            
            if provider == current_provider:
                st.success(f"{status_emoji} **{name.title()}** {speed_info} - ATIVO")
            elif provider.is_available():
                st.info(f"{status_emoji} {name.title()} {speed_info}")
            else:
                st.error(f"{status_emoji} {name.title()} {speed_info} - N√£o configurado")
    
    # Informa√ß√µes detalhadas do provedor ativo
    current_provider = provider_registry.get_current_provider()
    if current_provider:
        current_info = all_providers[current_provider.get_name()]
        
        # API Ativa
        with st.sidebar.expander("üéØ API Ativa"):
            st.markdown(f"- **Nome:** {current_provider.get_name().title()}")
            st.markdown(f"- **Velocidade:** {current_info['speed'].title()}")
            st.markdown(f"- **Custo:** {current_info['cost'].title()}")
        
        # Seletor de modelo
        with st.sidebar.expander("ü§ñ Seletor de Modelo", expanded=False):
            available_models = current_provider.get_available_models()
            current_model = current_provider.get_current_model()
            
            if available_models:
                # Cria o mapeamento para modelos
                model_names = {
                    "llama3-70b-8192": "ü¶ô Llama 3 70B",
                    "llama3-8b-8192": "ü¶ô Llama 3 8B"
                }
                
                # Op√ß√µes para o selectbox
                model_options = [model_names.get(m, m) for m in available_models]
                
                # Encontrar √≠ndice atual
                try:
                    current_index = available_models.index(current_model)
                except ValueError:
                    current_index = 0
                
                # Selectbox para escolher modelo
                selected_display = st.selectbox(
                    "Escolha o modelo:",
                    model_options,
                    index=current_index,
                    help="Diferentes modelos t√™m caracter√≠sticas distintas: velocidade vs qualidade vs contexto.",
                    key="model_selector"
                )
                
                # Converte de volta para nome interno
                selected_model = None
                for internal_name, display_name in model_names.items():
                    if display_name == selected_display:
                        selected_model = internal_name
                        break
                
                # Troca o modelo se necess√°rio
                if selected_model and selected_model != current_model:
                    if current_provider.switch_model(selected_model):
                        
                        # Preserva o hist√≥rico ao trocar o modelo
                        msg_count = preserve_chatbot_state()
                
                # Informa√ß√µes do modelo atual
                st.markdown("**üìã Modelo Atual:**")
                st.markdown(f"- **Nome:** {model_names.get(current_model, current_model)}")
                
                # Caracter√≠sticas dos modelos
                model_info = {
                    "llama3-70b-8192": {"size": "70B", "speed": "M√©dio", "quality": "Excelente", "context": "8K"},
                    "llama3-8b-8192": {"size": "8B", "speed": "R√°pido", "quality": "Bom", "context": "8K"}
 
                }
                
                if current_model in model_info:
                    info = model_info[current_model]
                    st.markdown(f"- **Tamanho:** {info['size']}")
                    st.markdown(f"- **Velocidade:** {info['speed']}")
                    st.markdown(f"- **Qualidade:** {info['quality']}")
                    st.markdown(f"- **Contexto:** {info['context']} tokens")
            else:
                st.warning("Nenhum modelo dispon√≠vel")
    
    # Configura√ß√µes do chatbot
    st.sidebar.subheader("ü§ñ Chatbot")
    personality = st.sidebar.selectbox(
        "Personalidade:",
        ["helpful", "creative", "technical"],
        index=0,
        help="Escolha como o chatbot deve se comportar"
    )
    
    if hasattr(st.session_state, 'chatbot') and st.session_state.chatbot.personality != personality:
        # Preserva o hist√≥rico ao trocar personalidade
        msg_count = preserve_chatbot_state(personality)
    
    # A√ß√µes com o expander
    with st.sidebar.expander("üõ†Ô∏è A√ß√µes", expanded=False):
        if st.button("üßπ Limpar Hist√≥rico do Chat", key="clear_chat_sidebar"):
            if hasattr(st.session_state, 'chatbot'):
                st.session_state.chatbot.clear_memory()
            st.session_state.chat_history = []
            st.success("Hist√≥rico limpo.")
            st.rerun()
        
        if st.button("üîÑ Recarregar APIs", key="reload_apis_sidebar"):
            # Recria o gerenciador de LLM
            st.success("APIs recarregadas!")
            st.rerun()
    
    # Bot√£o de download da conversa
    if hasattr(st.session_state, 'chatbot') and st.session_state.chatbot.conversation_history:
        with st.sidebar.expander("üíæ Exportar Conversa", expanded=False):
            # Prepara os dados de exporta√ß√£o
            export_result = st.session_state.chatbot.export_conversation()
            
            if export_result.get("success", False):
                col1, col2 = st.columns(2)
                
                with col1:
                    # Bot√£o download JSON
                    st.download_button(
                        label="üìÑ JSON",
                        data=export_result["json_content"],
                        file_name=export_result["filename_json"],
                        mime="application/json",
                        help="Baixar conversa em formato JSON (estruturado)"
                    )
                
                with col2:
                    # Bot√£o download TXT
                    st.download_button(
                        label="üìù TXT",
                        data=export_result["txt_content"],
                        file_name=export_result["filename_txt"],
                        mime="text/plain",
                        help="Baixar conversa em formato texto (leg√≠vel)"
                    )
                
                # Informa√ß√µes adicionais
                total_msgs = export_result["export_data"]["export_info"]["total_messages"]
                st.info(f"üìä {total_msgs} mensagens prontas para download")
            else:
                st.error(export_result.get("error", "Erro desconhecido"))

    # Informa√ß√µes do projeto
    with st.sidebar.expander("üí° Informa√ß√µes do Projeto"):
        st.markdown(f"""
        - LangChain
        - Groq API (gratuita)
        - An√°lise de Sentimentos (LLM)
        - Gera√ß√£o de Resumos
        - Chatbot Inteligente
        """)
    
    # Informa√ß√µes t√©cnicas (expans√≠vel)
    with st.sidebar.expander("üîß Informa√ß√µes T√©cnicas"):
        st.markdown(f"""
        - **Python:** {sys.version.split()[0]}
        - **Streamlit:** {st.__version__}
        - **API Ativa:** {current_provider.get_name() if current_provider else 'Nenhuma'}
        - **Status:** {current_provider.is_available() if current_provider else 'N/A'}
        """)

    # Setup de APIs
    if not provider_registry.is_any_provider_available():
        st.sidebar.subheader("Setup Necess√°rio")
        st.sidebar.error("‚ö†Ô∏è Configure uma API para usar o sistema.")
        st.sidebar.markdown("""
        **Configurar Groq (Gratuito):**
        ```bash
        python setup_env.py
        ```
        
        **Ou manualmente:**
        1. Acesse [console.groq.com](https://console.groq.com/)
        2. Crie uma conta gratuita
        3. Gere uma API key
        4. Crie arquivo `.env` com:
        ```
        GROQ_API_KEY=sua_chave_aqui
        ```
        """)

def chatbot_tab():
    """Interface do chatbot."""
    st.header("üí¨ Chatbot Inteligente")
    
    # Verifica se algum provedor est√° dispon√≠vel
    if not provider_registry.is_any_provider_available():
        st.error("‚ùå **Nenhuma API configurada**")
        st.warning("Configure uma API para usar o chatbot. Execute: `python setup_env.py`")
        st.info("üîó APIs suportadas: Groq (gratuita)")
        return
    
    # Informa√ß√µes do sistema
    col1, col2, col3 = st.columns([2, 1, 1])
    
    with col1:
        personality = st.session_state.chatbot.personality if hasattr(st.session_state, 'chatbot') else "helpful"
        st.info(f"üé≠ Personalidade atual: **{personality.title()}**")
    
    with col2:
        # Indica o provedor ativo
        provider_icons = {
            "groq": "üöÄ"
            # Espa√ßo para outros provedores no futuro
        }
        current_provider = provider_registry.get_current_provider()
        icon = provider_icons.get(current_provider.get_name(), "‚ùì")
        st.success(f"{icon} **{current_provider.get_name().title() if current_provider else 'N/A'}**")
    
    with col3:
        stats = st.session_state.chatbot.get_stats() if hasattr(st.session_state, 'chatbot') else {"messages": 0}
        st.metric("Mensagens", stats.get("messages", 0))
    
    # Interface de chat
    chat_container = st.container()
    
    # Exibe o hist√≥rico
    with chat_container:
        for i, msg in enumerate(st.session_state.chat_history):
            # Mensagem do usu√°rio
            st.markdown(f"""
            <div style="background: #2d3748; color: #ffffff; padding: 1rem; border-radius: 10px; margin: 0.5rem 0; border-left: 4px solid #4299e1;">
                <strong>üë§ Voc√™ ({msg['timestamp']}):</strong><br>
                {msg['user']}
            </div>
            """, unsafe_allow_html=True)
            
            # Resposta do bot
            provider_icon = provider_icons.get(msg.get('provider', 'unknown'), "‚ùì")
            provider_name = msg.get('provider', 'unknown').title()
            st.markdown(f"""
            <div style="background: #4a5568; color: #ffffff; padding: 1rem; border-radius: 10px; margin: 0.5rem 0; border-left: 4px solid #9f7aea;">
                <strong>{provider_icon} {provider_name} Assistant:</strong><br>
                {msg['bot']}
            </div>
            """, unsafe_allow_html=True)
    
    # Inicializa a vari√°vel de controle se n√£o existir
    if 'chatbot_example_text' not in st.session_state:
        st.session_state.chatbot_example_text = ""
    
    # Controles de entrada
    # Caixa de texto principal (largura total)
    user_input = st.text_area(
        "Digite sua mensagem:",
        value=st.session_state.chatbot_example_text,
        placeholder="Fa√ßa uma pergunta ou inicie uma conversa...",
        height=100,
        key=f"chat_input_{len(st.session_state.chat_history)}"
    )

    
    col1, col2, col3, col4 = st.columns([1, 1, 1, 1.3])
    
    with col1:
        send_button = st.button("üì§ Enviar", type="primary", key=f"send_btn_{len(st.session_state.chat_history)}")
    
    with col2:
        if st.button("üßπ Limpar", key=f"clear_btn_{len(st.session_state.chat_history)}"):
            st.session_state.chatbot.clear_memory()
            st.session_state.chat_history = []
            st.session_state.chatbot_example_text = ""  # Limpa tamb√©m o campo de exemplo
            st.success("Hist√≥rico limpo!")
            st.rerun()
    
    with col3:
        # Bot√£o de exemplo
        if st.button("üé≤ Exemplo", key=f"example_btn_{len(st.session_state.chat_history)}"):
            examples = [
                "Ol√°! Como voc√™ funciona?",
                "Explique o que √© intelig√™ncia artificial",
                "Conte uma hist√≥ria criativa sobre rob√¥s",
                "Quais s√£o as melhores pr√°ticas de programa√ß√£o em Python?",
                "Compare os pr√≥s e contras da IA",
                "Como funciona o machine learning?"
            ]
            import random
            st.session_state.chatbot_example_text = random.choice(examples)
            st.rerun()
    
    with col4:
        # Bot√£o HTML
        st.html("""
        <a href="#page-top" style="
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 0.25rem 0.75rem;
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            color: white;
            text-decoration: none;
            border-radius: 0.5rem;
            text-align: center;
            font-weight: 400;
            font-size: 0.875rem;
            line-height: 1.6;
            height: 2.5rem;
            min-height: 2.5rem;
            box-sizing: border-box;
            cursor: pointer;
            border: 1px solid transparent;
            transition: transform 0.2s, box-shadow 0.2s;
            margin: 0;
            white-space: nowrap;
        " onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 4px 8px rgba(0,0,0,0.2)'" 
           onmouseout="this.style.transform='translateY(0px)'; this.style.boxShadow='none'"
           onmousedown="this.style.transform='translateY(0px)'">
            ‚¨ÜÔ∏è Voltar ao Topo
        </a>
        """)
    
    # Processa a mensagem quando bot√£o for clicado
    if send_button and user_input:
        current_provider = provider_registry.get_current_provider()
        with st.spinner(f"ü§î {current_provider.get_name().title()} est√° pensando..."):
            # Valida a entrada
            validation = validate_text_input(user_input, min_length=1, max_length=1000)
            
            if validation["valid"]:
                # Obt√©m a resposta do chatbot
                response = st.session_state.chatbot.chat(user_input)
                
                # Verifica se houve erro na resposta
                if response.startswith("‚ùå"):
                    st.error(response)
                    return
                
                # Adiciona ao hist√≥rico da sess√£o
                timestamp = datetime.now().strftime("%H:%M")
                st.session_state.chat_history.append({
                    "timestamp": timestamp,
                    "user": user_input,
                    "bot": response,
                    "provider": current_provider.get_name()
                })
                
                # Limpa o campo ap√≥s enviar
                st.session_state.chatbot_example_text = ""
                
                st.rerun()
            else:
                st.error(validation["error"])

def sentiment_tab():
    """Interface de an√°lise de sentimentos."""
    st.header("üòÄ An√°lise de Sentimentos")
    
    # Verifica se algum provedor est√° dispon√≠vel
    if not provider_registry.is_any_provider_available():
        st.error("‚ùå **Nenhuma API configurada**")
        st.warning("Configure uma API para usar a an√°lise de sentimentos. Execute: `python setup_env.py`")
        st.info("üîó APIs suportadas: Groq (gratuita)")
        return
    
    st.markdown("""
    <div class="feature-card">
        <h4>üéØ An√°lise Inteligente com LLM</h4>
        <p>Utiliza <strong>LLM avan√ßado</strong> para an√°lise contextual e precisa de sentimentos com alta qualidade.</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Inicializa a vari√°vel de controle se n√£o existir
    if 'sentiment_example_text' not in st.session_state:
        st.session_state.sentiment_example_text = ""
    
    # Input de texto
    text_input = st.text_area(
        "üìù Digite o texto para an√°lise:",
        value=st.session_state.sentiment_example_text,
        placeholder="Exemplo: Estou muito feliz com os resultados do projeto!",
        height=150,
        key="sentiment_text_input"
    )
    
    col1, col2, col3 = st.columns([1, 1, 4])
    
    with col1:
        analyze_button = st.button("üîç Analisar", type="primary", key="sentiment_analyze_btn")
    
    with col2:
        if st.button("üìù Exemplo", key="sentiment_example_btn"):
            examples = [
                "Estou muito feliz com os resultados do projeto! A equipe trabalhou de forma excepcional.",
                "Infelizmente, o sistema apresentou v√°rios bugs e falhas cr√≠ticas.",
                "O produto tem caracter√≠sticas interessantes, mas ainda precisa de melhorias.",
                "A apresenta√ß√£o foi absolutamente incr√≠vel! Superou todas as expectativas."
            ]
            import random
            st.session_state.sentiment_example_text = random.choice(examples)
            st.rerun()
    
    # Processa a an√°lise
    if analyze_button and text_input:
        validation = validate_text_input(text_input)
        
        if validation["valid"]:
            text = validation["text"]
            
            with st.spinner("üß† Analisando sentimentos do texto..."):
                # An√°lise completa
                results = sentiment_analyzer.analyze_comprehensive(text)
                
                # Estat√≠sticas do texto
                stats = calculate_text_stats(text)
                
            # Exibe os resultados
            st.subheader("üìà Resultados da An√°lise")
            
            # Consenso geral (apenas um m√©todo por enquanto)
            consensus = results["consensus"]
            emoji = get_emoji_for_sentiment(consensus["sentiment"])
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown(f"""
                <div class="metric-card">
                    <h3>{emoji}</h3>
                    <h4>{consensus['sentiment'].title()}</h4>
                    <p>Sentimento</p>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                st.markdown(f"""
                <div class="metric-card">
                    <h4>{consensus['confidence']:.1%}</h4>
                    <p>Confian√ßa</p>
                </div>
                """, unsafe_allow_html=True)
            
            # Resultados mais detalhados
            st.subheader("üî¨ An√°lise Detalhada")
            
            for method, result in results["individual_results"].items():
                if "error" not in result:
                    with st.expander(f" {method.upper()} - {result['sentiment'].title()} ({result.get('confidence', 0):.1%})"):
                        st.json(result)
            
            # Estat√≠sticas do texto
            st.subheader("üìù Estat√≠sticas do Texto")
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("Palavras", stats["words"])
            with col2:
                st.metric("Frases", stats["sentences"])
            with col3:
                st.metric("Caracteres", stats["characters"])
            with col4:
                st.metric("Palavras/Frase", stats["avg_words_per_sentence"])
            
        else:
            st.error(validation["error"])

def summarizer_tab():
    """Interface do gerador de resumos."""
    st.header("üìù Gerador de Resumos")
    
    # Verificar se algum provedor est√° dispon√≠vel
    if not provider_registry.is_any_provider_available():
        st.error("‚ùå **Nenhuma API configurada**")
        st.warning("Configure uma API para usar o gerador de resumos. Execute: `python setup_env.py`")
        st.info("üîó APIs suportadas: Groq (gratuita)")
        return
    
    st.markdown("""
    <div class="feature-card">
        <h4>‚ö° Sumariza√ß√£o Inteligente</h4>
        <p>M√∫ltiplas estrat√©gias: <strong>Extrativa</strong> e <strong>LangChain</strong> com diferentes estilos e n√≠veis de detalhe.</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Inicializar vari√°vel de controle se n√£o existir
    if 'summarizer_example_text' not in st.session_state:
        st.session_state.summarizer_example_text = ""
    
    # Input de texto
    text_input = st.text_area(
        "üìÑ Digite o texto para resumir:",
        value=st.session_state.summarizer_example_text,
        placeholder="Cole aqui um texto longo que voc√™ gostaria de resumir...",
        height=200,
        key="summarizer_text_input"
    )
    
    # Configura√ß√µes
    col1, col2, col3 = st.columns(3)
    
    with col1:
        summary_type = st.selectbox(
            "üéØ Tipo de Resumo:",
            ["informative", "executive", "creative", "technical"],
            help="Escolha o estilo do resumo"
        )
    
    with col2:
        max_sentences = st.slider(
            "üìè Frases (Extrativo):",
            min_value=1, max_value=10, value=3
        )
    
    with col3:
        # Placeholder para manter o layout
        st.write("")
    
    col1, col2, col3 = st.columns([1, 1, 4])
    
    with col1:
        summarize_button = st.button("üìã Resumir", type="primary", key="summarizer_btn")
    
    with col2:
        if st.button("üì∞ Exemplo", key="summarizer_example_btn"):
            example_text = """A intelig√™ncia artificial (IA) √© uma das tecnologias mais revolucion√°rias do s√©culo XXI, transformando drasticamente a forma como vivemos, trabalhamos e interagimos com o mundo. Desde sistemas de recomenda√ß√£o em plataformas de streaming at√© carros aut√¥nomos, a IA est√° presente em in√∫meras aplica√ß√µes do nosso cotidiano.

Os modelos de linguagem de grande escala, como GPT e BERT, representam um marco significativo no processamento de linguagem natural. Estes modelos s√£o capazes de compreender contexto, gerar texto coerente e realizar tarefas complexas de compreens√£o textual. A arquitetura transformer, introduzida em 2017, revolucionou o campo e se tornou a base para a maioria dos modelos de IA generativa atuais.

No entanto, o desenvolvimento da IA tamb√©m traz desafios importantes. Quest√µes √©ticas, como vi√©s algor√≠tmico, privacidade de dados e o impacto no mercado de trabalho, precisam ser cuidadosamente consideradas. √â essencial desenvolver IA de forma respons√°vel, garantindo que os benef√≠cios sejam amplamente distribu√≠dos e os riscos minimizados.

O futuro da IA promete ainda mais avan√ßos, com pesquisas em andamento sobre IA geral artificial, computa√ß√£o qu√¢ntica aplicada √† IA e sistemas multimodais que podem processar texto, imagem e √°udio simultaneamente. Estas inova√ß√µes t√™m o potencial de resolver problemas complexos em √°reas como medicina, mudan√ßas clim√°ticas e educa√ß√£o."""
            
            st.session_state.summarizer_example_text = example_text
            st.rerun()
    
    # Processar sumariza√ß√£o
    if summarize_button and text_input:
        validation = validate_text_input(text_input, min_length=100)
        
        if validation["valid"]:
            text = validation["text"]
            
            with st.spinner("üìù Gerando resumos..."):
                # Sumariza√ß√£o completa
                results = summarizer.summarize_comprehensive(
                    text,
                    num_sentences=max_sentences,
                    summary_type=summary_type
                )
            
            # Exibir resultados
            st.subheader("üìÑ Resumos Gerados")
            
            # Estat√≠sticas gerais
            stats = results["statistics"]
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("M√©todos", stats["successful_methods"])
            with col2:
                st.metric("Compress√£o M√©dia", f"{stats['average_compression']:.1%}")
            with col3:
                st.metric("Texto Original", f"{results['original_length']} chars")
            with col4:
                st.metric("Melhor M√©todo", stats["best_method"])
            
            # Resumos individuais
            for method, result in results["summaries"].items():
                if "error" not in result:
                    compression = result.get("compression_ratio", 0)
                    
                    with st.expander(f"{method.upper()} - Compress√£o: {compression:.1%}"):
                        st.markdown(f"**Resumo:**")
                        st.markdown(result["summary"])
                        
                        if "details" in result:
                            st.markdown("**Detalhes T√©cnicos:**")
                            st.json(result["details"])
            
        else:
            st.error(validation["error"])

def analytics_tab():
    """Interface de analytics e m√©tricas."""
    st.header("üìä Analytics e M√©tricas")
    
    # Nova se√ß√£o: Sistema de Provedores Extens√≠vel
    st.subheader("üîß Sistema de Provedores LLM")
    
    # Informa√ß√µes sobre todos os provedores registrados
    all_providers = provider_registry.get_all_providers_info()
    available_providers = provider_registry.get_available_providers()
    current_provider = provider_registry.get_current_provider()
    
    # M√©tricas de provedores
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Provedores Registrados", len(all_providers))
    with col2:
        st.metric("Provedores Dispon√≠veis", len(available_providers))
    with col3:
        current_name = current_provider.get_name() if current_provider else "Nenhum"
        st.metric("Provedor Ativo", current_name.title())
    
    # Lista de provedores com detalhes
    st.markdown("### üéØ Provedores Registrados")
    
    for name, info in all_providers.items():
        provider = provider_registry.get_provider(name)
        is_active = current_provider and current_provider.get_name() == name
        is_available = provider.is_available()
        
        # √çcone baseado no status
        if is_active and is_available:
            icon = "üü¢"
            status_text = "ATIVO"
        elif is_available:
            icon = "üîµ"
            status_text = "DISPON√çVEL"
        else:
            icon = "üî¥"
            status_text = "INDISPON√çVEL"
        
        with st.expander(f"{icon} {name.upper()} - {status_text}"):
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**Informa√ß√µes B√°sicas:**")
                st.markdown(f"‚Ä¢ **Descri√ß√£o:** {info.get('description', 'N/A')}")
                st.markdown(f"‚Ä¢ **Velocidade:** {info.get('speed', 'N/A')}")
                st.markdown(f"‚Ä¢ **Custo:** {info.get('cost', 'N/A')}")
                st.markdown(f"‚Ä¢ **Modelo Atual:** {info.get('current_model', 'N/A')}")
                
                # Bot√£o para trocar provedor (se dispon√≠vel)
                if is_available and not is_active:
                    if st.button(f"üîÑ Trocar para {name.title()}", key=f"switch_{name}"):
                        if provider_registry.switch_provider(name):
                            st.success(f"‚úÖ Trocado para {name.title()}!")
                            st.rerun()
                        else:
                            st.error(f"‚ùå Erro ao trocar para {name.title()}")
            
            with col2:
                st.markdown("**Estat√≠sticas de Performance:**")
                stats = provider.get_performance_stats()
                for key, value in stats.items():
                    display_key = key.replace("_", " ").title()
                    st.markdown(f"‚Ä¢ **{display_key}:** {value}")
                
                # Vantagens
                if "advantages" in info:
                    st.markdown("**Vantagens:**")
                    for advantage in info["advantages"]:
                        st.markdown(f"‚Ä¢ {advantage}")
    
    # Separador visual
    st.divider()
    
    # M√©tricas dos analisadores (se√ß√£o existente)
    st.subheader("‚öôÔ∏è Capacidades dos Analisadores")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üòÄ An√°lise de Sentimentos**")
        sentiment_methods = sentiment_analyzer.get_available_methods()
        
        for method, info in sentiment_methods.items():
            if info.get("available", False):
                st.success(f"‚úÖ {method.upper()} - {info.get('speed', 'N/A')} / {info.get('accuracy', 'N/A')}")
            else:
                st.error(f"‚ùå {method.upper()} - Indispon√≠vel")
    
    with col2:
        st.markdown("**üìù Gera√ß√£o de Resumos**")
        summarizer_methods = summarizer.get_available_methods()
        
        for method, info in summarizer_methods.items():
            if info.get("available", False):
                st.success(f"‚úÖ {method.title()} - {info.get('speed', 'N/A')} / {info.get('quality', 'N/A')}")
            else:
                st.error(f"‚ùå {method.title()} - Indispon√≠vel")
    
    # Estat√≠sticas da sess√£o
    st.subheader("üìà Estat√≠sticas da Sess√£o")
    
    if hasattr(st.session_state, 'chatbot'):
        chatbot_stats = st.session_state.chatbot.get_stats()
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Mensagens do Chat", chatbot_stats.get("messages", 0))
        with col2:
            st.metric("Tamanho M√©dio (User)", f"{chatbot_stats.get('avg_user_length', 0):.0f}")
        with col3:
            st.metric("Tamanho M√©dio (Bot)", f"{chatbot_stats.get('avg_bot_length', 0):.0f}")
        with col4:
            st.metric("Personalidade", chatbot_stats.get("personality", "N/A").title())
    
    # Modelos dispon√≠veis do provedor atual
    if current_provider and current_provider.is_available():
        st.subheader("ü§ñ Modelos Dispon√≠veis (Provedor Atual)")
        
        models = current_provider.get_available_models()
        current_model = current_provider.get_current_model()
        
        for model in models:
            if model == current_model:
                st.success(f"‚úÖ **{model}** - ATIVO (Modelo atual)")
            else:
                st.info(f"üîÑ {model} - Dispon√≠vel")
    
    # Informa√ß√µes do sistema
    st.subheader("üíª Informa√ß√µes do Sistema")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üêç Python & Depend√™ncias:**")
        groq_provider = provider_registry.get_provider("groq")
        groq_status = "Configurado" if groq_provider and groq_provider.is_available() else "N√£o configurado"
        
        st.code(f"""
Python: {sys.version.split()[0]}
Streamlit: {st.__version__}
LangChain: Instalado
Groq: {groq_status}
        """)
    
    with col2:
        st.markdown("**üìä Status dos Componentes:**")
        groq_provider = provider_registry.get_provider("groq")
        groq_available = groq_provider and groq_provider.is_available()
        
        components_status = {
            "Groq API": "‚úÖ Ativo" if groq_available else "‚ùå Inativo",
            "An√°lise Sentimentos": "‚úÖ Ativo" if sentiment_analyzer.get_available_methods().get("llm", {}).get("available") else "‚ùå Inativo",
            "Resumos": "‚úÖ Ativo" if summarizer.get_available_methods().get("langchain", {}).get("available") else "‚ùå Inativo",
            "Chatbot": "‚úÖ Ativo" if provider_registry.is_any_provider_available() else "‚ùå Inativo"
        }
        
        for component, status in components_status.items():
            st.markdown(f"- **{component}:** {status}")

def main():
    """Fun√ß√£o principal da aplica√ß√£o."""
    # Inicializa o estado da sess√£o
    initialize_session_state()
    
    # Mostra o cabe√ßalho
    show_header()
    
    # Configura o sidebar
    show_sidebar()
    
    # Cria as abas principais
    tab1, tab2, tab3, tab4 = st.tabs([
        "üí¨ Chatbot", 
        "üìä Sentimentos", 
        "üìù Resumos", 
        "üìà Analytics"
    ])
    
    with tab1:
        chatbot_tab()
    
    with tab2:
        sentiment_tab()
    
    with tab3:
        summarizer_tab()
    
    with tab4:
        analytics_tab()
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #666; margin-top: 2rem;">
        <p>ü§ñ <strong>Sistema de IA Generativa Multi-Funcional</strong></p>
        <p><em>Tecnologias: Python ‚Ä¢ LangChain ‚Ä¢ Streamlit ‚Ä¢ Groq ‚Ä¢ NLTK</em></p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main() 

